name: CICD
on:
  pull_request:
    branches:
      - 'main'
  workflow_dispatch:

jobs:
  # build:
  #   name: Build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2

  #     - name: Install stable toolchain
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #         override: true

  #     - name: Cross build with all features
  #       uses: actions-rs/cargo@v1
  #       with:
  #         use-cross: true 
  #         command: build
  #         args: --release --all-features --verbose

  #    # - name: Setup Cargo Lambda
  #    #   uses: zerj9/setup-cargo-lambda@v0.1.0

  #    # - name: Setup Zig
  #    #   uses: goto-bus-stop/setup-zig@v1.3.0

  #    # - name: Cargo lambda build
  #    #   run: |
  #    #     cargo lambda build --output-format zip --release

  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest
    services:
      db:
        image: mysql:8.0
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: foo
          MYSQL_USER: user1
          MYSQL_PASSWORD: user1_password
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Show Docker containers
        run: docker ps -a
      - name: Show databases for root user
        run: mysql --protocol=tcp -h localhost -P 3306 -u root -proot_password -e "SHOW DATABASES"
      - name: Show databases for user1
        run: mysql --protocol=tcp -h localhost -P 3306 -u user1 -puser1_password -e "SHOW DATABASES"

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Display current directory
        run: |
          mysqld --version
          echo "DATABASE_URL=mysql://root:${{ secrets.DATABASE_PASSWORD }}@127.0.0.1:3306/test_db" >> .env
          pwd
          ls -al
          cat .env
          echo "${{secrets.DATABASE_PASSWORD}}"

      # - name: MySQL start
      #   run: sudo service mysql start

      # - name: For safe mode mysql
      #   run: |
      #     sudo service mysql stop
      #     sudo systemctl set-environment MYSQLD_OPTS="--skip-grant-tables"
      #     sudo service mysql start

      # ここから
      # - name: MySQL server install
      #   run: |
      #     sudo apt update
      #     sudo apt install mysql-server

      - name: For safe mode mysql
        run: |
          # sudo systemctl stop mysqld
          # sudo systemctl set-environment MYSQLD_OPTS="--skip-grant-tables"
          # sudo systemctl start mysqld
          sudo service mysql stop
          sudo systemctl set-environment MYSQLD_OPTS="--skip-grant-tables"
          sudo service mysql start
      # ここまで

      - name: Display MySQL mysql.user
        if: always()
        run: sudo mysql -uroot -p${{ secrets.DATABASE_PASSWORD }} -h127.0.0.1 -P3306 -e="SELECT user, host FROM mysql.user"
      - name: Display MySQL mysql.user
        if: failure()
        run: sudo mysql -uroot -p${{ secrets.DATABASE_ROOT_PASSWORD }} -h127.0.0.1 -P3306 -e="SELECT user, host FROM mysql.user"
      - name: Display MySQL mysql.user with DATABASE_EMPTY_PASSWORD
        if: failure()
        run: sudo mysql -uroot -p"" -h127.0.0.1 -P3306 -e="SELECT user, host FROM mysql.user"
      - name: Display MySQL mysql.user
        if: failure()
        run: sudo mysql -uroot -h127.0.0.1 -P3306 -e="SELECT user, host FROM mysql.user"
      - name: Display MySQL mysql.user
        if: failure()
        run: sudo mysql -h127.0.0.1 -P3306 -e="SELECT user, host FROM mysql.user"
      - name: Clear
        if: failure()
        run: echo "truth message"

      # - name: MySQL sock file exists check
      #   run: |
      #     sudo mkdir -p /var/run/mysqld/
      #     sudo touch /var/run/mysqld/mysqld.sock

      - name: MySQL alive check with ping on NO_DATABASE_PASSWORD
        if: always()
        run: mysqladmin ping -uroot -h127.0.0.1 -P3306
      - name: MySQL alive check with ping on DATABASE_ROOT_PASSWORD
        if: failure()
        run: mysqladmin ping -uroot -h127.0.0.1 -P3306 -p${{ secrets.DATABASE_ROOT_PASSWORD }}
      - name: MySQL alive check with ping on DATABASE_EMPTY_PASSWORD
        if: failure()
        run: mysqladmin ping -uroot -h127.0.0.1 -P3306 -p""
      - name: MySQL alive check with ping on DATABASE_PASSWORD
        if: failure()
        run: mysqladmin ping -uroot -h127.0.0.1 -P3306 -p${{ secrets.DATABASE_PASSWORD }}
      - name: MySQL alive check with ping on DATABASE_PASSWORD
        if: failure()
        run: mysqladmin ping -h127.0.0.1 -P3306

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install sqlx-cli
        run: |
          cargo install sqlx-cli

      - name: Database setup
        run: |
          sqlx database create

      - name: Database migrate
        run: |
          sqlx migrate run

      - name: Setup Cargo Lambda
        uses: zerj9/setup-cargo-lambda@v0.1.0

      - name: Install cargo watch
        run: |
          cargo install cargo-watch

      - name: Cargo lambda watch, invoke and cargo test
        run: |
          cargo lambda watch &
          sleep 1
          curl -L http://localhost:9000/lambda-url/lambda_function_01
          cargo lambda invoke lambda_function_01 --data-ascii "{}"
          cargo test -- --test-threads=1

      - name: Clean up some process
        run: |
          ps aux | grep "watch" | grep -v grep | awk '{ print "kill -9", $2 }' | sudo sh